#!/usr/bin/env python3
from collections import defaultdict
import subprocess

QCMD = ['squeue', '-h', '-p', 'gpu', '-o', '%10u %12R %20b']
ICMD = ['sinfo', '-h', '-p', 'gpu', '-o', '%o %G']


if __name__ == '__main__':
    pending = defaultdict(list)
    users = defaultdict(list)
    usage = {}
    stats = subprocess.check_output(QCMD, universal_newlines=True)
    gpus = subprocess.check_output(ICMD, universal_newlines=True)

    for line in gpus.strip().split('\n'):
        gpu, count = line.split()
        usage[gpu] = int(count.split(':')[-1])

    gpuinfo = usage.copy()

    n_total_gpus = sum(usage.values())

    print('SLURM GPU utilization summary')
    print('-----------------------------')
    for line in stats.split('\n'):
        line = line.strip()
        if line:
            name, state, gpus = line.strip().split()
            if gpus == '(null)':
                continue
            gpu_count = int(gpus.split(':')[-1])
            if not state.startswith('gpu'):
                pending[name].append(gpu_count)
            else:
                # running job
                users[name].append(gpu_count)
                usage[state] -= gpu_count

    items = sorted(users.items(), key=lambda x: sum(x[1]), reverse=True)
    n_used_gpus = 0
    for name, jobs in items:
        n_used_gpus += sum(jobs)
        print('{:15}  {:3} active jobs on {:2} GPUs'.format(
            name, len(jobs), sum(jobs)), end='')
        if name in pending:
            jobs = pending[name]
            print(' ({:3} jobs waiting for {:2} GPUs)'.format(
                len(jobs), sum(jobs)), end='')
        print()
    print('-----------------------------')
    usage = sorted(usage.items(), key=lambda x: x[1], reverse=True)
    for gpu, free in usage:
        if free > 0:
            print('{:4} {:2}/{:2} free GPUs'.format(gpu, free, gpuinfo[gpu]))
    print('-----------------------------')
    print('{}/{} GPUs are in use.'.format(n_used_gpus, n_total_gpus))
